{"ast":null,"code":"import firebase from 'firebase/app';\nlet db = firebase.firestore();\n\nasync function doCreateUserWithEmailAndPassword(email, password, firstName, lastName) {\n  await firebase.auth().createUserWithEmailAndPassword(email, password).then(function (user) {\n    console.log('uid', user.uid);\n    let data = {\n      firstName: firstName,\n      lastName: lastName,\n      email: email\n    };\n    let setDoc = db.collection('users').doc(user.uid).set(data);\n    console.log(setDoc);\n  }).catch(function (error) {});\n  firebase.auth().currentUser.updateProfile({\n    displayName: firstName + \" \" + lastName\n  });\n}\n\nasync function doChangePassword(email, oldPassword, newPassword) {\n  let credential = firebase.auth.EmailAuthProvider.credential(email, oldPassword);\n  await firebase.auth().currentUser.reauthenticateWithCredential(credential);\n  await firebase.auth().currentUser.updatePassword(newPassword);\n  await doSignOut();\n}\n\nasync function doSignInWithEmailAndPassword(email, password) {\n  await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nasync function doSocialSignIn(provider) {\n  let socialProvider = null;\n\n  if (provider === 'google') {\n    socialProvider = new firebase.auth.GoogleAuthProvider();\n  } else if (provider === 'facebook') {\n    socialProvider = new firebase.auth.FacebookAuthProvider();\n  }\n\n  await firebase.auth().signInWithPopup(socialProvider);\n}\n\nasync function doPasswordReset(email) {\n  await firebase.auth().sendPasswordResetEmail(email);\n}\n\nasync function doPasswordUpdate(password) {\n  await firebase.auth().updatePassword(password);\n}\n\nasync function doSignOut() {\n  await firebase.auth().signOut();\n}\n\nexport { doCreateUserWithEmailAndPassword, doSocialSignIn, doSignInWithEmailAndPassword, doPasswordReset, doPasswordUpdate, doSignOut, doChangePassword };","map":{"version":3,"sources":["/Users/vedadnya_98/Downloads/CS-554-master 2/react_third_lecture/firebase-auth/src/firebase/FirebaseFunctions.js"],"names":["firebase","db","firestore","doCreateUserWithEmailAndPassword","email","password","firstName","lastName","auth","createUserWithEmailAndPassword","then","user","console","log","uid","data","setDoc","collection","doc","set","catch","error","currentUser","updateProfile","displayName","doChangePassword","oldPassword","newPassword","credential","EmailAuthProvider","reauthenticateWithCredential","updatePassword","doSignOut","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSocialSignIn","provider","socialProvider","GoogleAuthProvider","FacebookAuthProvider","signInWithPopup","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","signOut"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AAEA,IAAIC,EAAE,GAAGD,QAAQ,CAACE,SAAT,EAAT;;AAEA,eAAeC,gCAAf,CAAgDC,KAAhD,EAAuDC,QAAvD,EAAiEC,SAAjE,EAA6EC,QAA7E,EAAuF;AACtF,QAAMP,QAAQ,CAACQ,IAAT,GAAgBC,8BAAhB,CAA+CL,KAA/C,EAAsDC,QAAtD,EAAgEK,IAAhE,CAAqE,UAASC,IAAT,EAAc;AACxFC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBF,IAAI,CAACG,GAAvB;AACA,QAAIC,IAAI,GAAG;AACVT,MAAAA,SAAS,EAAEA,SADD;AAEVC,MAAAA,QAAQ,EAAGA,QAFD;AAGVH,MAAAA,KAAK,EAAGA;AAHE,KAAX;AAKE,QAAIY,MAAM,GAAGf,EAAE,CAACgB,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BP,IAAI,CAACG,GAAhC,EAAqCK,GAArC,CAAyCJ,IAAzC,CAAb;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACA,GATG,EASDI,KATC,CASK,UAASC,KAAT,EAAgB,CACxB,CAVG,CAAN;AAWArB,EAAAA,QAAQ,CAACQ,IAAT,GAAgBc,WAAhB,CAA4BC,aAA5B,CAA0C;AAAEC,IAAAA,WAAW,EAAElB,SAAS,GAAC,GAAV,GAAcC;AAA7B,GAA1C;AACA;;AAED,eAAekB,gBAAf,CAAgCrB,KAAhC,EAAuCsB,WAAvC,EAAoDC,WAApD,EAAiE;AAChE,MAAIC,UAAU,GAAG5B,QAAQ,CAACQ,IAAT,CAAcqB,iBAAd,CAAgCD,UAAhC,CAA2CxB,KAA3C,EAAkDsB,WAAlD,CAAjB;AACA,QAAM1B,QAAQ,CAACQ,IAAT,GAAgBc,WAAhB,CAA4BQ,4BAA5B,CAAyDF,UAAzD,CAAN;AACA,QAAM5B,QAAQ,CAACQ,IAAT,GAAgBc,WAAhB,CAA4BS,cAA5B,CAA2CJ,WAA3C,CAAN;AACA,QAAMK,SAAS,EAAf;AACA;;AAED,eAAeC,4BAAf,CAA4C7B,KAA5C,EAAmDC,QAAnD,EAA6D;AAC5D,QAAML,QAAQ,CAACQ,IAAT,GAAgB0B,0BAAhB,CAA2C9B,KAA3C,EAAkDC,QAAlD,CAAN;AACA;;AAED,eAAe8B,cAAf,CAA8BC,QAA9B,EAAwC;AACvC,MAAIC,cAAc,GAAG,IAArB;;AACA,MAAID,QAAQ,KAAK,QAAjB,EAA2B;AAC1BC,IAAAA,cAAc,GAAG,IAAIrC,QAAQ,CAACQ,IAAT,CAAc8B,kBAAlB,EAAjB;AACA,GAFD,MAEO,IAAIF,QAAQ,KAAK,UAAjB,EAA6B;AACnCC,IAAAA,cAAc,GAAG,IAAIrC,QAAQ,CAACQ,IAAT,CAAc+B,oBAAlB,EAAjB;AACA;;AACD,QAAMvC,QAAQ,CAACQ,IAAT,GAAgBgC,eAAhB,CAAgCH,cAAhC,CAAN;AACA;;AAED,eAAeI,eAAf,CAA+BrC,KAA/B,EAAsC;AACrC,QAAMJ,QAAQ,CAACQ,IAAT,GAAgBkC,sBAAhB,CAAuCtC,KAAvC,CAAN;AACA;;AAED,eAAeuC,gBAAf,CAAgCtC,QAAhC,EAA0C;AACzC,QAAML,QAAQ,CAACQ,IAAT,GAAgBuB,cAAhB,CAA+B1B,QAA/B,CAAN;AACA;;AAED,eAAe2B,SAAf,GAA2B;AAC1B,QAAMhC,QAAQ,CAACQ,IAAT,GAAgBoC,OAAhB,EAAN;AACA;;AAED,SACCzC,gCADD,EAECgC,cAFD,EAGCF,4BAHD,EAICQ,eAJD,EAKCE,gBALD,EAMCX,SAND,EAOCP,gBAPD","sourcesContent":["import firebase from 'firebase/app';\n\nlet db = firebase.firestore();\n\nasync function doCreateUserWithEmailAndPassword(email, password, firstName , lastName) {\n\tawait firebase.auth().createUserWithEmailAndPassword(email, password).then(function(user){\n\t\tconsole.log('uid',user.uid)\n\t\tlet data = {\n\t\t\tfirstName: firstName,\n\t\t\tlastName : lastName,\n\t\t\temail : email\n\t\t  };\n\t\t  let setDoc = db.collection('users').doc(user.uid).set(data);\t\n\t\t  console.log(setDoc)\t  \n\t  }).catch(function(error) {\n\t  });\n\tfirebase.auth().currentUser.updateProfile({ displayName: firstName+\" \"+lastName });\n}\n\nasync function doChangePassword(email, oldPassword, newPassword) {\n\tlet credential = firebase.auth.EmailAuthProvider.credential(email, oldPassword);\n\tawait firebase.auth().currentUser.reauthenticateWithCredential(credential);\n\tawait firebase.auth().currentUser.updatePassword(newPassword);\n\tawait doSignOut();\n}\n\nasync function doSignInWithEmailAndPassword(email, password) {\n\tawait firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nasync function doSocialSignIn(provider) {\n\tlet socialProvider = null;\n\tif (provider === 'google') {\n\t\tsocialProvider = new firebase.auth.GoogleAuthProvider();\n\t} else if (provider === 'facebook') {\n\t\tsocialProvider = new firebase.auth.FacebookAuthProvider();\n\t}\n\tawait firebase.auth().signInWithPopup(socialProvider);\n}\n\nasync function doPasswordReset(email) {\n\tawait firebase.auth().sendPasswordResetEmail(email);\n}\n\nasync function doPasswordUpdate(password) {\n\tawait firebase.auth().updatePassword(password);\n}\n\nasync function doSignOut() {\n\tawait firebase.auth().signOut();\n}\n\nexport {\n\tdoCreateUserWithEmailAndPassword,\n\tdoSocialSignIn,\n\tdoSignInWithEmailAndPassword,\n\tdoPasswordReset,\n\tdoPasswordUpdate,\n\tdoSignOut,\n\tdoChangePassword\n};\n"]},"metadata":{},"sourceType":"module"}