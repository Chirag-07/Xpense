{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport firebaseApp from './Firebase';\nlet db = firebaseApp.firestore(); // async function updateUser(userObject) {\n//     await db.collection('users').doc(uid).set(userObject)\n// };\n\nasync function addPosts(uid, postObject) {\n  await db.collection('posts').doc(uid).set(postObject);\n  await db.collection('users').doc(uid).update({\n    posts: firebase.firestore.FieldValue.arrayUnion(postObject)\n  });\n}\n\n; // async function deletePosts(userObject) {\n//     const removeObj = db.collection('posts').doc(uid).delete()\n//     await db.collection('users').doc(uid).update({\n//         // posts : firebase.firestore.FieldValue.arrayUnion(postObject)\n//         posts : firebase.firestore.FieldValue.arrayUnion(userObject)\n//     });\n// };\n\nasync function getUser(uid) {\n  let userRef = await db.collection('users').doc(uid);\n  let getDoc = await userRef.get().then(doc => {\n    if (!doc.exists) {\n      console.log('No such document!');\n    } else {\n      //console.log('Document data:', doc.data());\n      console.log(\"Inside firestore functions: \", getDoc);\n    }\n\n    return getDoc;\n  }).catch(err => {\n    console.log('Error getting document', err);\n  });\n  return getDoc;\n}\n\n;\n\nasync function getPost(uid) {\n  let postRef = await db.collection('posts').doc(uid);\n  let getDoc = postRef.get().then(doc => {\n    if (!doc.exists) {\n      console.log('No such document!');\n    } else {\n      return doc.data();\n    }\n  }).catch(err => {\n    console.log('Error getting document', err);\n  });\n}\n\n;\n\nasync function getAllPosts(collegeID) {\n  let postsRef = db.collection('posts');\n  let allPosts = [];\n  let query = postsRef.where('collegeID', '==', collegeID).get().then(snapshot => {\n    if (snapshot.empty) {\n      console.log('No matching documents.');\n      return;\n    }\n\n    snapshot.forEach(doc => {\n      //console.log(doc.id, '=>', doc.data());\n      allPosts.add(doc.data());\n    });\n    return allPosts;\n  }).catch(err => {\n    console.log('Error getting documents', err);\n  });\n  return query;\n}\n\n;\nexport { // updateUser,\naddPosts // deletePosts,\n, getAllPosts, getUser, getPost };","map":{"version":3,"sources":["/Users/vedadnya_98/Documents/GitHub/Xpense/firebase-auth/src/firebase/FirestoreFunctions.js"],"names":["firebase","firebaseApp","db","firestore","addPosts","uid","postObject","collection","doc","set","update","posts","FieldValue","arrayUnion","getUser","userRef","getDoc","get","then","exists","console","log","catch","err","getPost","postRef","data","getAllPosts","collegeID","postsRef","allPosts","query","where","snapshot","empty","forEach","add"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport firebaseApp from './Firebase'\n\nlet db  = firebaseApp.firestore();\n\n// async function updateUser(userObject) {\n//     await db.collection('users').doc(uid).set(userObject)\n// };\n\nasync function addPosts(uid, postObject) {\n    await db.collection('posts').doc(uid).set(postObject);\n    await db.collection('users').doc(uid).update({\n        posts : firebase.firestore.FieldValue.arrayUnion(postObject)\n    });\n};\n\n// async function deletePosts(userObject) {\n//     const removeObj = db.collection('posts').doc(uid).delete()\n//     await db.collection('users').doc(uid).update({\n//         // posts : firebase.firestore.FieldValue.arrayUnion(postObject)\n//         posts : firebase.firestore.FieldValue.arrayUnion(userObject)\n//     });\n// };\n\n\nasync function getUser(uid) {\n    let userRef = await db.collection('users').doc(uid);\n    let getDoc = await userRef.get()\n      .then(doc => {\n        if (!doc.exists) {\n          console.log('No such document!');\n        } else \n        {\n          //console.log('Document data:', doc.data());\n          console.log(\"Inside firestore functions: \", getDoc)\n        }\n        return getDoc;\n      })\n      .catch(err => {\n        console.log('Error getting document', err);\n      });\n      return getDoc;\n    };\n\n\nasync function getPost(uid) {\nlet postRef = await db.collection('posts').doc(uid);\nlet getDoc = postRef.get()\n  .then(doc => {\n    if (!doc.exists) {\n      console.log('No such document!');\n    } else \n    {\n      return doc.data()\n    }\n  })\n  .catch(err => {\n    console.log('Error getting document', err);\n  });\n};\n\n\nasync function getAllPosts(collegeID){\n    let postsRef = db.collection('posts');\n    let allPosts = []\n    let query = postsRef.where('collegeID', '==', collegeID).get()\n    .then(snapshot => {\n        if (snapshot.empty) {\n        console.log('No matching documents.');\n        return;\n        } \n        snapshot.forEach(doc => {\n        //console.log(doc.id, '=>', doc.data());\n            allPosts.add(doc.data())\n        });\n        return allPosts\n    })\n    .catch(err => {\n        console.log('Error getting documents', err);\n    });\n    return query;\n};\n\nexport {\n    // updateUser,\n    addPosts,\n    // deletePosts,\n    getAllPosts,\n    getUser,\n    getPost\n};\n\n    \n"]},"metadata":{},"sourceType":"module"}