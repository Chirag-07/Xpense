{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore'; // let db  = firebase.firestore();\n\nasync function doCreateUserWithEmailAndPassword(email, password, firstName, lastName) {\n  await firebase.auth().createUserWithEmailAndPassword(email, password);\n  var user = firebase.auth().currentUser;\n  let data = {\n    firstName: firstName,\n    lastName: lastName,\n    email: email\n  };\n  let setDoc = await firebase.firestore().collection('users').doc(user.uid).set(data);\n  console.log(setDoc);\n  firebase.auth().currentUser.updateProfile({\n    displayName: String(firstName) + \" \" + String(lastName)\n  });\n}\n\nasync function doChangePassword(email, oldPassword, newPassword) {\n  let credential = firebase.auth.EmailAuthProvider.credential(email, oldPassword);\n  await firebase.auth().currentUser.reauthenticateWithCredential(credential);\n  await firebase.auth().currentUser.updatePassword(newPassword);\n  await doSignOut();\n}\n\nasync function doSignInWithEmailAndPassword(email, password) {\n  await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nasync function doSocialSignIn(provider) {\n  let socialProvider = null;\n\n  if (provider === 'google') {\n    socialProvider = new firebase.auth.GoogleAuthProvider();\n  } else if (provider === 'facebook') {\n    socialProvider = new firebase.auth.FacebookAuthProvider();\n  }\n\n  await firebase.auth().signInWithPopup(socialProvider);\n}\n\nasync function doPasswordReset(email) {\n  await firebase.auth().sendPasswordResetEmail(email);\n}\n\nasync function doPasswordUpdate(password) {\n  await firebase.auth().updatePassword(password);\n}\n\nasync function doSignOut() {\n  await firebase.auth().signOut();\n}\n\nexport { doCreateUserWithEmailAndPassword, doSocialSignIn, doSignInWithEmailAndPassword, doPasswordReset, doPasswordUpdate, doSignOut, doChangePassword };","map":{"version":3,"sources":["/Users/vedadnya_98/Downloads/CS-554-master 2/react_third_lecture/firebase-auth/src/firebase/FirebaseFunctions.js"],"names":["firebase","doCreateUserWithEmailAndPassword","email","password","firstName","lastName","auth","createUserWithEmailAndPassword","user","currentUser","data","setDoc","firestore","collection","doc","uid","set","console","log","updateProfile","displayName","String","doChangePassword","oldPassword","newPassword","credential","EmailAuthProvider","reauthenticateWithCredential","updatePassword","doSignOut","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSocialSignIn","provider","socialProvider","GoogleAuthProvider","FacebookAuthProvider","signInWithPopup","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","signOut"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP,C,CAEA;;AAEA,eAAeC,gCAAf,CAAgDC,KAAhD,EAAuDC,QAAvD,EAAiEC,SAAjE,EAA6EC,QAA7E,EAAuF;AACtF,QAAML,QAAQ,CAACM,IAAT,GAAgBC,8BAAhB,CAA+CL,KAA/C,EAAsDC,QAAtD,CAAN;AACA,MAAIK,IAAI,GAAGR,QAAQ,CAACM,IAAT,GAAgBG,WAA3B;AACA,MAAIC,IAAI,GAAG;AACVN,IAAAA,SAAS,EAAEA,SADD;AAEVC,IAAAA,QAAQ,EAAGA,QAFD;AAGVH,IAAAA,KAAK,EAAGA;AAHE,GAAX;AAKE,MAAIS,MAAM,GAAG,MAAMX,QAAQ,CAACY,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCC,GAAzC,CAA6CN,IAAI,CAACO,GAAlD,EAAuDC,GAAvD,CAA2DN,IAA3D,CAAnB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACFX,EAAAA,QAAQ,CAACM,IAAT,GAAgBG,WAAhB,CAA4BU,aAA5B,CAA0C;AAAEC,IAAAA,WAAW,EAAEC,MAAM,CAACjB,SAAD,CAAN,GAAkB,GAAlB,GAAsBiB,MAAM,CAAChB,QAAD;AAA3C,GAA1C;AACA;;AAED,eAAeiB,gBAAf,CAAgCpB,KAAhC,EAAuCqB,WAAvC,EAAoDC,WAApD,EAAiE;AAChE,MAAIC,UAAU,GAAGzB,QAAQ,CAACM,IAAT,CAAcoB,iBAAd,CAAgCD,UAAhC,CAA2CvB,KAA3C,EAAkDqB,WAAlD,CAAjB;AACA,QAAMvB,QAAQ,CAACM,IAAT,GAAgBG,WAAhB,CAA4BkB,4BAA5B,CAAyDF,UAAzD,CAAN;AACA,QAAMzB,QAAQ,CAACM,IAAT,GAAgBG,WAAhB,CAA4BmB,cAA5B,CAA2CJ,WAA3C,CAAN;AACA,QAAMK,SAAS,EAAf;AACA;;AAED,eAAeC,4BAAf,CAA4C5B,KAA5C,EAAmDC,QAAnD,EAA6D;AAC5D,QAAMH,QAAQ,CAACM,IAAT,GAAgByB,0BAAhB,CAA2C7B,KAA3C,EAAkDC,QAAlD,CAAN;AACA;;AAED,eAAe6B,cAAf,CAA8BC,QAA9B,EAAwC;AACvC,MAAIC,cAAc,GAAG,IAArB;;AACA,MAAID,QAAQ,KAAK,QAAjB,EAA2B;AAC1BC,IAAAA,cAAc,GAAG,IAAIlC,QAAQ,CAACM,IAAT,CAAc6B,kBAAlB,EAAjB;AACA,GAFD,MAEO,IAAIF,QAAQ,KAAK,UAAjB,EAA6B;AACnCC,IAAAA,cAAc,GAAG,IAAIlC,QAAQ,CAACM,IAAT,CAAc8B,oBAAlB,EAAjB;AACA;;AACD,QAAMpC,QAAQ,CAACM,IAAT,GAAgB+B,eAAhB,CAAgCH,cAAhC,CAAN;AACA;;AAED,eAAeI,eAAf,CAA+BpC,KAA/B,EAAsC;AACrC,QAAMF,QAAQ,CAACM,IAAT,GAAgBiC,sBAAhB,CAAuCrC,KAAvC,CAAN;AACA;;AAED,eAAesC,gBAAf,CAAgCrC,QAAhC,EAA0C;AACzC,QAAMH,QAAQ,CAACM,IAAT,GAAgBsB,cAAhB,CAA+BzB,QAA/B,CAAN;AACA;;AAED,eAAe0B,SAAf,GAA2B;AAC1B,QAAM7B,QAAQ,CAACM,IAAT,GAAgBmC,OAAhB,EAAN;AACA;;AAED,SACCxC,gCADD,EAEC+B,cAFD,EAGCF,4BAHD,EAICQ,eAJD,EAKCE,gBALD,EAMCX,SAND,EAOCP,gBAPD","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\n// let db  = firebase.firestore();\n\nasync function doCreateUserWithEmailAndPassword(email, password, firstName , lastName) {\n\tawait firebase.auth().createUserWithEmailAndPassword(email, password)\n\tvar user = firebase.auth().currentUser;\n\tlet data = {\n\t\tfirstName: firstName,\n\t\tlastName : lastName,\n\t\temail : email\n\t  };\n\t  let setDoc = await firebase.firestore().collection('users').doc(user.uid).set(data);\t\n\t  console.log(setDoc)\t  \n\tfirebase.auth().currentUser.updateProfile({ displayName: String(firstName)+\" \"+String(lastName) });\n}\n\nasync function doChangePassword(email, oldPassword, newPassword) {\n\tlet credential = firebase.auth.EmailAuthProvider.credential(email, oldPassword);\n\tawait firebase.auth().currentUser.reauthenticateWithCredential(credential);\n\tawait firebase.auth().currentUser.updatePassword(newPassword);\n\tawait doSignOut();\n}\n\nasync function doSignInWithEmailAndPassword(email, password) {\n\tawait firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nasync function doSocialSignIn(provider) {\n\tlet socialProvider = null;\n\tif (provider === 'google') {\n\t\tsocialProvider = new firebase.auth.GoogleAuthProvider();\n\t} else if (provider === 'facebook') {\n\t\tsocialProvider = new firebase.auth.FacebookAuthProvider();\n\t}\n\tawait firebase.auth().signInWithPopup(socialProvider);\n}\n\nasync function doPasswordReset(email) {\n\tawait firebase.auth().sendPasswordResetEmail(email);\n}\n\nasync function doPasswordUpdate(password) {\n\tawait firebase.auth().updatePassword(password);\n}\n\nasync function doSignOut() {\n\tawait firebase.auth().signOut();\n}\n\nexport {\n\tdoCreateUserWithEmailAndPassword,\n\tdoSocialSignIn,\n\tdoSignInWithEmailAndPassword,\n\tdoPasswordReset,\n\tdoPasswordUpdate,\n\tdoSignOut,\n\tdoChangePassword\n};\n"]},"metadata":{},"sourceType":"module"}