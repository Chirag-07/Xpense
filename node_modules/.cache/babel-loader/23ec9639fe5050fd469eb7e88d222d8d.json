{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport firebaseApp from './Firebase';\nlet db = firebaseApp.firestore(); // async function updateUser(userObject) {\n//     await db.collection('users').doc(uid).set(userObject)\n// };\n\nasync function addPosts(uid, postObject) {\n  await db.collection('posts').doc(uid).update({\n    userPosts: firebase.firestore.FieldValue.arrayUnion(postObject)\n  });\n  await db.collection('users').doc(uid).update({\n    posts: firebase.firestore.FieldValue.arrayUnion(postObject)\n  });\n}\n\n; // async function deletePosts(userObject) {\n//     const removeObj = db.collection('posts').doc(uid).delete()\n//     await db.collection('users').doc(uid).update({\n//         // posts : firebase.firestore.FieldValue.arrayUnion(postObject)\n//         posts : firebase.firestore.FieldValue.arrayUnion(userObject)\n//     });\n// };\n\nasync function getUser(uid) {\n  let userRef = await db.collection('users').doc(uid);\n  let getDoc = userRef.get().then(doc => {\n    if (!doc.exists) {\n      console.log('No such document!');\n    } else {\n      //console.log('Document data:', doc.data());\n      console.log(\"Inside firestore functions: \", doc.data());\n      return doc.data();\n    }\n  }).catch(err => {\n    console.log('Error getting document', err);\n  });\n  return getDoc;\n}\n\n; //function to add/update profile pic of the user\n\nasync function updateProfilePic(uid, imageUrl) {\n  // let userRef = await db.collection('users').doc(uid);\n  console.log('enter update profile pic');\n  let updatePic = await db.collection(\"users\").doc(uid).update({\n    \"photoURL\": imageUrl\n  }).then(function () {\n    console.log(\"profile pic was updated!\");\n  });\n} //function to update account details of the user\n\n\nasync function updateAccountInfo(uid, firstName, lastName, dateOfBirth) {\n  // let userRef = await db.collection('users').doc(uid);\n  console.log('enter update account info ');\n  let updateInfo = await db.collection(\"users\").doc(uid).update({\n    \"firstName\": firstName,\n    \"lastName\": lastName,\n    \"dob\": dateOfBirth\n  }).then(function () {\n    console.log(\"account info was updated!\");\n  });\n}\n\nasync function getPost(uid) {\n  let postRef = await db.collection('posts').doc(uid);\n  let getDoc = postRef.get().then(doc => {\n    if (!doc.exists) {\n      console.log('No such document!');\n    } else {\n      return doc.data();\n    }\n  }).catch(err => {\n    console.log('Error getting document', err);\n  });\n  return getDoc;\n}\n\n;\n\nasync function getAllPostsforCollege(collegeID) {\n  let postsRef = db.collection('posts');\n  let allPosts = [];\n  let query = postsRef.where('collegeID', '==', collegeID).get().then(snapshot => {\n    if (snapshot.empty) {\n      console.log('No matching documents.');\n      return;\n    }\n\n    snapshot.forEach(doc => {\n      //console.log(doc.id, '=>', doc.data());\n      allPosts.add(doc.data());\n    });\n    return allPosts;\n  }).catch(err => {\n    console.log('Error getting documents', err);\n  });\n  return query;\n}\n\n;\n\nasync function getAllPosts() {\n  const snapshot = await firebase.firestore().collection('posts').get();\n  return snapshot.docs.map(doc => doc.data());\n}\n\n;\n\nasync function getAllColleges() {\n  console.log(\"getting all colleges\");\n  const snapshot = await firebase.firestore().collection('colleges').get();\n  return snapshot.docs.map(doc => doc.data());\n}\n\n;\n\nasync function getCollege(uid) {\n  let collegeRef = await db.collection('colleges').doc(uid);\n  let getDoc = collegeRef.get().then(doc => {\n    if (!doc.exists) {\n      console.log('No such document!');\n    } else {\n      return doc.data();\n    }\n  }).catch(err => {\n    console.log('Error getting document', err);\n  });\n  return getDoc;\n}\n\n;\n\nasync function addCollege(element) {\n  await db.collection('colleges').add(element);\n}\n\n;\nexport { // updateUser,\naddPosts, getAllColleges, getCollege, addCollege // deletePosts,\n, getAllPosts, getAllPostsforCollege, getUser, getPost, updateProfilePic, updateAccountInfo };","map":{"version":3,"sources":["/Users/vedadnya_98/Documents/GitHub/Xpense/firebase-auth/src/firebase/FirestoreFunctions.js"],"names":["firebase","firebaseApp","db","firestore","addPosts","uid","postObject","collection","doc","update","userPosts","FieldValue","arrayUnion","posts","getUser","userRef","getDoc","get","then","exists","console","log","data","catch","err","updateProfilePic","imageUrl","updatePic","updateAccountInfo","firstName","lastName","dateOfBirth","updateInfo","getPost","postRef","getAllPostsforCollege","collegeID","postsRef","allPosts","query","where","snapshot","empty","forEach","add","getAllPosts","docs","map","getAllColleges","getCollege","collegeRef","addCollege","element"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport firebaseApp from './Firebase'\n\nlet db = firebaseApp.firestore();\n\n// async function updateUser(userObject) {\n//     await db.collection('users').doc(uid).set(userObject)\n// };\n\nasync function addPosts(uid, postObject) {\n    \n  await db.collection('posts').doc(uid).update({\n    userPosts:firebase.firestore.FieldValue.arrayUnion(postObject)\n  });\n  await db.collection('users').doc(uid).update({\n    posts: firebase.firestore.FieldValue.arrayUnion(postObject)\n  });\n};\n\n// async function deletePosts(userObject) {\n//     const removeObj = db.collection('posts').doc(uid).delete()\n//     await db.collection('users').doc(uid).update({\n//         // posts : firebase.firestore.FieldValue.arrayUnion(postObject)\n//         posts : firebase.firestore.FieldValue.arrayUnion(userObject)\n//     });\n// };\n\n\nasync function getUser(uid) {\n  let userRef = await db.collection('users').doc(uid);\n  let getDoc = userRef.get()\n    .then(doc => {\n      if (!doc.exists) {\n        console.log('No such document!');\n      } else {\n        //console.log('Document data:', doc.data());\n        console.log(\"Inside firestore functions: \", doc.data())\n        return doc.data();\n      }\n    })\n    .catch(err => {\n      console.log('Error getting document', err);\n    });\n  return getDoc\n};\n\n//function to add/update profile pic of the user\nasync function updateProfilePic(uid, imageUrl) {\n  // let userRef = await db.collection('users').doc(uid);\n  console.log('enter update profile pic');\n  let updatePic = await db.collection(\"users\").doc(uid).update({\n    \"photoURL\": imageUrl,\n  })\n    .then(function () {\n      console.log(\"profile pic was updated!\");\n    });\n}\n\n//function to update account details of the user\nasync function updateAccountInfo(uid, firstName, lastName, dateOfBirth) {\n  // let userRef = await db.collection('users').doc(uid);\n  console.log('enter update account info ');\n  let updateInfo = await db.collection(\"users\").doc(uid).update({\n    \"firstName\": firstName,\n    \"lastName\": lastName,\n    \"dob\": dateOfBirth\n  })\n    .then(function () {\n      console.log(\"account info was updated!\");\n    });\n}\nasync function getPost(uid) {\n  let postRef = await db.collection('posts').doc(uid);\n  let getDoc = postRef.get()\n    .then(doc => {\n      if (!doc.exists) {\n        console.log('No such document!');\n      } else {\n        return doc.data()\n      }\n    })\n    .catch(err => {\n      console.log('Error getting document', err);\n    });\n  return getDoc\n};\n\n\nasync function getAllPostsforCollege(collegeID) {\n  let postsRef = db.collection('posts');\n  let allPosts = []\n  let query = postsRef.where('collegeID', '==', collegeID).get()\n    .then(snapshot => {\n      if (snapshot.empty) {\n        console.log('No matching documents.');\n        return;\n      }\n      snapshot.forEach(doc => {\n        //console.log(doc.id, '=>', doc.data());\n        allPosts.add(doc.data())\n      });\n      return allPosts\n    })\n    .catch(err => {\n      console.log('Error getting documents', err);\n    });\n  return query;\n};\n\nasync function getAllPosts() {\n  const snapshot = await firebase.firestore().collection('posts').get()\n  return snapshot.docs.map(doc => doc.data());\n};\n\nasync function getAllColleges() {\n  console.log(\"getting all colleges\");\n  const snapshot = await firebase.firestore().collection('colleges').get()\n  return snapshot.docs.map(doc => doc.data());\n};\n\nasync function getCollege(uid) {\n  let collegeRef = await db.collection('colleges').doc(uid);\n  let getDoc = collegeRef.get()\n    .then(doc => {\n      if (!doc.exists) {\n        console.log('No such document!');\n      } else {\n        return doc.data()\n      }\n    })\n    .catch(err => {\n      console.log('Error getting document', err);\n    });\n  return getDoc\n};\n\nasync function addCollege(element) {\n  await db.collection('colleges').add(element);\n};\n\nexport {\n  // updateUser,\n  addPosts,\n  getAllColleges,\n  getCollege,\n  addCollege,\n  // deletePosts,\n  getAllPosts,\n  getAllPostsforCollege,\n  getUser,\n  getPost,\n  updateProfilePic,\n  updateAccountInfo\n};\n\n\n"]},"metadata":{},"sourceType":"module"}